#ifndef NAMEDPIPE_H
#define NAMEDPIPE_H

#include <stdint.h>
#include <string>

#ifdef __linux__
	typedef uint32_t DWORD;
	typedef int HANDLE;
#else
	typedef unsigned long DWORD;
	typedef void* HANDLE;
#endif

/*! ----------------------------------------------------------------------------------------
 * @brief: Interface for named pipe
 * -----------------------------------------------------------------------------------------
 * */
class NamedPipe {
public:

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class MODE : uint8_t {
		READ = 1,
		WRITE
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class STATE : uint8_t {
		CLOSED = 0,
		INITIALIZED,
		OPENED
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	struct InitializationStruct {
		std::string pipeName;
		NamedPipe::MODE mode;
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	NamedPipe();
	NamedPipe(InitializationStruct *initStr);

	/*! ------------------------------------------------------------------------------------
	 * Calls close
	 * -------------------------------------------------------------------------------------
	 * */
	~NamedPipe();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Reads config file and sets parameters
	 * -------------------------------------------------------------------------------------
	 * */
	void Initialization(InitializationStruct *initStr);

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	NamedPipe::STATE GetState() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Close and destroy pipe
	 * -------------------------------------------------------------------------------------
	 * */
	void Close();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Check pipe for errors / only pipe with PM_READ mode can be checked -
	 * checks read ability
	 * -------------------------------------------------------------------------------------
	 * */
	bool CheckWorkingCapacity() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	DWORD GetLastErrCode() const;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Creates pipe and catches thread for client
	 * -------------------------------------------------------------------------------------
	 * */
	void Create();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Open existing pipe
	 * -------------------------------------------------------------------------------------
	 * */
	void Open();

	/*! ------------------------------------------------------------------------------------
	 * @brief: Returns
	 * 		- number of bytes were read
	 * 		- 0 if receiver buffer is empty
	 * 		- -1 if operation is failed
	 * -------------------------------------------------------------------------------------
	 * */
	int Read(uint8_t *buffer, DWORD buf_size) const;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Transfers buf as is.
	 * Returns -1 if operation is failed
	 * -------------------------------------------------------------------------------------
	 * */
	int Write(const uint8_t *buffer, DWORD buf_size) const;

private:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	enum class INSTANCE_TYPE : uint8_t {
		OPENING = 1,
		CREATING
	};

	/*! ------------------------------------------------------------------------------------
	 * @brief: File descriptor / used by OS
	 * -------------------------------------------------------------------------------------
	 * */
	HANDLE fd;

	/*! ------------------------------------------------------------------------------------
	 * @brief: System name of pipe. Used by Open / Create
	 * -------------------------------------------------------------------------------------
	 * */
	std::string pipeName;

	/*! ------------------------------------------------------------------------------------
	 * -------------------------------------------------------------------------------------
	 * */
	NamedPipe::MODE mode;

	/*! ------------------------------------------------------------------------------------
	 * -------------------------------------------------------------------------------------
	 * */
	NamedPipe::STATE state;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Defines type for this exemplar / used inside
	 * -------------------------------------------------------------------------------------
	 * */
	NamedPipe::INSTANCE_TYPE instanceType;

	/*! ------------------------------------------------------------------------------------
	 * @brief: Resets errno
	 * -------------------------------------------------------------------------------------
	 * */
	int GetLastSystemError() const;
};

#endif
