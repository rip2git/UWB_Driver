#ifndef CHANGE_DELEGATE_H
#define CHANGE_DELEGATE_H


/*! ----------------------------------------------------------------------------------------
 * @brief: Interface for _ChangeDelegate & ChangeDelegate
 * -----------------------------------------------------------------------------------------
 * */
class IChangeDelegate {
public:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	virtual ~IChangeDelegate() {}

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	virtual bool Change() const = 0;
};


/*! ----------------------------------------------------------------------------------------
 * @brief: Temporary class needed to hide content of the validation object
 * -----------------------------------------------------------------------------------------
 * */
template <class OBJECT>
class _ChangeDelegate : public IChangeDelegate {
	typedef bool (OBJECT::*pChangeFunc)(void);

public:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	_ChangeDelegate(OBJECT *obj, pChangeFunc obj_Change)
	{
		this->obj = obj;
		this->obj_Change = obj_Change;
	}

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	virtual bool Change() const
	{
		return (obj != 0)? (obj->*obj_Change)() : 0;
	}

private:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	OBJECT *obj;

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	pChangeFunc obj_Change;
};


/*! ----------------------------------------------------------------------------------------
 * @brief: Provides the ability to change something without knowing the content of
 * the validation object; object should provides interface for changing.
 * -----------------------------------------------------------------------------------------
 * */
class ChangeDelegate {
public:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	ChangeDelegate(IChangeDelegate *iChDeleg = 0)
	{
		this->iChDeleg = iChDeleg;
	}

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	bool Change() const
	{
		return (iChDeleg != 0)? iChDeleg->Change() : 0;
	}

	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	ChangeDelegate& operator=(IChangeDelegate* iChDeleg)
	{
		this->iChDeleg = iChDeleg;
		return *this;
	}

private:
	/*! ------------------------------------------------------------------------------------
	 * @brief:
	 * -------------------------------------------------------------------------------------
	 * */
	IChangeDelegate *iChDeleg;
};


/*! ----------------------------------------------------------------------------------------
 * @brief: Provides to define change method are independent of object content
 * -----------------------------------------------------------------------------------------
 * */
template <class OBJECT>
IChangeDelegate* NewChangeDelegate(OBJECT* obj, bool (OBJECT::*pChangeFunc)(void))
{
	return new _ChangeDelegate<OBJECT> (obj, pChangeFunc);
}


#endif
