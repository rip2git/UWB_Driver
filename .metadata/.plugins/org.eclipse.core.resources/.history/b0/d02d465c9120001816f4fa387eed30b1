
#include "main.h"
#include "COMPort.h"
#include "UserPack.h"
#include "CheckSum.h"
#include <windows.h>

/// linker, misc
/// -static-libgcc -static-libstdc++


//#define DEBUG_MODE


#define POLL_PERIOD 	500


unsigned char buf[128];
unsigned int distance;
COMPort port;
size_t rdb;



union WORD_str {
	unsigned short d;
	unsigned char b[2];
};



DWORD WINAPI receive(CONST LPVOID lpParam)
{
	cout << "***rd on" << endl;
	HANDLE hMutex = (HANDLE)lpParam;
#ifdef DEBUG_MODE
	while (1) {
		WaitForSingleObject(hMutex, INFINITE);
		rdb = port.ReadByte(&(buf[0]));
		ReleaseMutex(hMutex);
		if (rdb != 0) {
			cout << buf[0];
		}
	}
#else
	while (1) {
		WaitForSingleObject(hMutex, INFINITE);
		rdb = port.Read(buf, 9);
		ReleaseMutex(hMutex);
		if (rdb != 0) {
			buf[0] |= 0x30;
			cout << "msg: ";
			for (int i = 0; i < 7; ++i)
				cout << buf[i];
			cout << " distance: " << static_cast <int> (buf[7] + (buf[8] << 8)) << " cm" << endl;
		}
	}
#endif
}


int main()
{
	unsigned char poll_msg[] = "0--OK--00";
	unsigned int ps;
	UserPack upack;
	WORD_str crc;

	int mainstate = 0;
	TON t1;

	COMPort::InitializationStruct init_str;
	init_str.baudRate = 115200;
	init_str.timeOut.Ms = 10;
	init_str.timeOut.nChars = 0;

	char pn[] = "COM1";
	for (int i = 1; i < 10; ++i) {
		pn[3] = i | 0x30;
		init_str.portName = pn;
		port.Initialization(&init_str);
		if (port.GetState() == COMPort::OPENED)
			break;
	}
	if (port.GetState() == COMPort::OPENED)
		cout << "***" << pn << " opened" << endl;
	else
		cout << "***error" << endl;


	HANDLE hMutex = CreateMutex(NULL, FALSE, NULL);
	HANDLE thr = CreateThread(NULL, 0, &receive, &hMutex, DETACHED_PROCESS, NULL);
	if (thr == INVALID_HANDLE_VALUE) {
		cout << "***thread error" << endl;
		cin >> buf;
		exit(0);
	}


	t1.start(0);
	while (1) {
		switch (mainstate) {
			case 0:
			{
				upack.Command = UserPack::COMMAND::SetID;
				upack.DestinationID = pn[3] & 0x0F;
				upack.TotalSize = 0;
				upack.ToBytes(buf);
				ps = port.Write(buf, 3);
				rdb = port.Read(buf, ps);
				if (rdb != 0) {
					buf[3] = 0;
					cout << buf;
					mainstate = 1;
				}
			} break;
			case 1:
			{
				upack.Command = UserPack::COMMAND::Distance;
				upack.DestinationID = UserPack::BROADCAST_ID;
				upack.TotalSize = sizeof(poll_msg);
				upack.Data = poll_msg;
				ps = upack.ToBytes(buf);
				crc.d = CHECK_SUM_CRC.GetCRC16(buf, ps);
				buf[ps] = crc.b[0];
				buf[ps + 1] = crc.b[1];

				Sleep(11);
				cout << "***wr on" << endl;
				mainstate = 2;
			} break;
			case 2:
			{
				Sleep(990);
				WaitForSingleObject(hMutex, INFINITE);
				port.Write(buf, sizeof(poll_msg) + UserPack::DATA_OFFSET + 2);
#ifdef DEBUG_MODE
				rdb = port.ReadByte(&(buf[1]));
				if (rdb != 0)
					cout << "***sended: " << t1.since() << endl;
#else
				cout << "***sended: " << t1.since() << endl;
#endif
				ReleaseMutex(hMutex);
			} break;

			default: // nop
				break;
		}
	}

	return 0;
}

