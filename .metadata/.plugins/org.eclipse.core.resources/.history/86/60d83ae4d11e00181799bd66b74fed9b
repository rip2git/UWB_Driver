
#include "main.h"
#include "COMPort.h"
#include <windows.h>

/// linker, misc
/// -static-libgcc -static-libstdc++


#define POLL_PERIOD 	500


unsigned char buf[50];
unsigned int distance;
COMPort port;
size_t rdb;


DWORD WINAPI receive(CONST LPVOID lpParam)
{
	cout << "*rd on" << endl;
	while (1) {
		rdb = port.Read(buf, 9);
		if (rdb != 0) {
			buf[0] |= 0x30; // address
			distance = buf[7] + (buf[8] << 8);

			cout << "msg(7fb): ";
			for (int i = 0; i < 7; ++i)
				cout << buf[i];
			cout << " distance: " << distance << " cm" << endl;
		}
	}
}


int main()
{

	unsigned char poll_msg[10];
	string str;

	int mainstate = 0;
	TON t1;


	COMPort::InitializationStruct init_str;
	init_str.baudRate = 115200;
	init_str.timeOut.Ms = 10;
	init_str.timeOut.nChars = 0;

	char pn[] = "COM1";
	for (int i = 1; i < 10; ++i) {
		pn[3] = i | 0x30;
		init_str.portName = pn;
		port.Initialization(&init_str);
		if (port.GetState() == COMPort::OPENED)
			break;
	}
	if (port.GetState() == COMPort::OPENED)
		cout << "*" << pn << " opened" << endl;
	else
		cout << "*error" << endl;


	HANDLE hMutex = CreateMutex(NULL, FALSE, NULL);
	HANDLE thr = CreateThread(NULL, 0, &receive, &hMutex, DETACHED_PROCESS, NULL);
	if (thr == INVALID_HANDLE_VALUE) {
		cout << "*thread error" << endl;
		cin >> buf;
		exit(0);
	}


	t1.start(0);
	while (1) {
		switch (mainstate) {
			case 0:
			{
				buf[0] = pn[3] & 0x0F;
				port.Write(buf, 1);
				rdb = port.Read(buf, 3);
				if (rdb != 0) {
					buf[3] = 0;
					cout << buf;
					mainstate = 1;
				}
			} break;
			case 1:
			{
				memcpy(poll_msg, "0--OK--00", 9);
				poll_msg[9] = 0;
				Sleep(11);
				cout << "*wr on" << endl;
				mainstate = 2;
			} break;
			case 2:
			{
				Sleep(490);
				port.Write(poll_msg, 9);
				cout << "sended: " << t1.since() << endl;
			} break;

			default: // nop
				break;
		}
	}

	return 0;
}

